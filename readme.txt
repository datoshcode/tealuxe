                                              GULP-START_DATOSHCODE / 01.11.2023


Про Збірку
--------------------------------------------------
Автор: Андрій Овчаров (Datosh Code);
Дата збірки: 01.11.2023;
Опис: Збірка "Gulp-start_DatoshCode" є допоміжним інструментом для веброзробника, що дозволяє виконувати розробку вебсайтів швидше та зручніше, адже має перелік відповідних плагінів та передбачає модульну будову проекту. 

Збірка підтримує: 
Gulp: CLI version: 2.3.0
Node JS: 20.9.0



Збірка дозволяє:
--------------------------------------------------
- конвертувати файли стилів .scss у .css;
- мініфікувати (стискати) файли .css, .js та файли зображень;
- виконувати розробку вебсайту в live-режимі;
- конвертувати файли зображень .png та .jpg у формати .avif та .webp;
- конвертувати файли шрифтів з .ttf та .otf у .woff та .woff2;
- підтримує модульну будову за принципом розробка вебсайту з окремих компонентів.



Команди термінала та комбінації клавіш для роботи з проєктом:
--------------------------------------------------
1. Розгорнути стартову збірку на комп'ютері:   npm i
2. Запустити gulp:                             gulp
3. Завершити роботу gulp:                      Ctrl+C;
4. Зібрати остаточний проєкт:                  gulp building



Перевірка робочого стану Збірки
---------------------------------------------------
Після розпаковки вмісту архіву в пупку з проєктом необхідно розгорнути Збірку (команда: npm i) та запустити gulp (команда: gulp).
Якщо у вікні браузера відобразиться текст привітання, то збірка робоча та нею можна користуватися.



Робота з файлами проєкта
---------------------------------------------------
Робота із зображеннями:
Усі вихідні зображення потрібно зберігати у папці app/images/src. При цьому в цій папці не рекомендується створювати окремі папки, наприклад, для іконок. Такі папки не будуть потім перенесені! Тому незалежно від розміру та формату всі зображення необхідно зберігати лише за адресою: app/images/src.



Робота зі шрифтами:
---------------------------------------------------
Усі вихідні шрифти у форматі .ttf, .otf необхідно зберігати у папці: app/fonts/src



Робота зі стилями css:
---------------------------------------------------
Усі вихідні стилі необхідно прописувати у файлі style.scss за адресою app/scss, а стилі сторонніх плагінів, а також окремі стилі-компоненти, рекомендується підключати через @import.
При цьому структура таких компонентів має наступну вигляд:

@import 'vars';
@import 'fonts';
@import 'reset';
@import 'libs';
@import 'global';

... тут код для стилів ...

@import 'media';



Робота зі скриптами js:
----------------------------------------------------
Усі вихідні скрипти бажано прописувати у файлі main.js за адресою app/js. Скрипти плагінів, встановлені через npm, необхідно прописувати gulpfile.js



Робота зі сторінками html:
----------------------------------------------------
Всі сторінки html слід зберігати за адресою: app/pages, а окремі їх компоненти (header.html, sidebar.html, footer.html та ін.) рекомендується зберігати за адресою: app/components і під'єднувати до html-сторінок, через include.

Наприклад: <!--=include footer.html-->.



Установка плагіна:
---------------------------------------------------
Для встановлення нового плагіна варто ввести команду в термінал:
npm i "назва пакета" -D

Наприклад:
npm i swiper -D

Новий пакет встановлюється в папку "node_modules".

Для підключення скриптів плагіну необхідно у файлі gulpfile.js перейти до розділу "Scripts і return src([...])" та на самому початку прописати шлях до файлу js плагіна (не мініфікований). 

Приклад з плагіном "swiper".

// Scripts
function scripts() {
   return src([
     "node_modules/swiper/swiper-bundle.js", <-- рядок вказівки шляху до плагіна .js
     "app/js/main.js"
])
...
}

А файли стилів для цього плагіна краще під"єднувати через @import у файлі style.scss, де на початку пишемо:

@import '../../node_modules/swiper/swiper-bundle';

або у файлі "_libs.scss"

без розширення .css!



Додаткові рекоментації
---------------------------------------------------

1. Намагайся не створювати безкінечну купу медіа-запитів при адаптиві вебсайту. Чим менше, то тим краще!;
2. Для створення міток та збереження результату своєї праці, обов"язково користуйся Git-ом!
3. Використовуй відносні одиниці (em, rem, vh та інше).
4. Візьми собі у звичку відділяти коментарями будову свого проєкту. 
Так наприклад, рекомендується на початку великого блоку коду вказати його початок так кінець наступним коментарем:

<!-- About us -->

... code ...

<!--/END About us -->

5. Перевіряй верстку на переповнення контентом та адаптивність.

6. Намагайся бути постійним та послідовним у своїх діях та візьми за звичку використовувати на протязі всього проєкту єдиний стандарт.
Наприклад, якщо вже почав вказувати колір використовуючи кодування rgb та rgba, то не варто посеред проєкту змінювати на hex. 
